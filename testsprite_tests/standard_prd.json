{
  "meta": {
    "project": "Researchy - AI Research Assistant Platform",
    "date": "2025-09-29",
    "prepared_by": "Generated by TestSprite"
  },
  "product_overview": "Researchy is an AI-powered research assistant platform designed to enable users to search for academic papers, analyze content, and generate new research documents through an intelligent conversational interface. It integrates advanced AI models, real-time streaming chat, and cloud storage to support researchers throughout their workflow.",
  "core_goals": [
    "Provide secure user authentication and personalized research sessions.",
    "Enable real-time, streaming conversational AI interactions for research assistance.",
    "Integrate academic paper search and retrieval with ArXiv API.",
    "Support extraction and analysis of PDF research documents.",
    "Facilitate generation of professional research papers using LaTeX and PDF rendering.",
    "Persist and manage conversation history and state across sessions.",
    "Deliver a performant and scalable backend with effective data and storage management."
  ],
  "key_features": [
    "User Authentication and Management with Clerk OAuth support and profile handling.",
    "Advanced Streaming Chat Interface with token-by-token real-time responses, conversation management, and interactive UI.",
    "AI Research Agent powered by Google Gemini and LangGraph with multi-step reasoning and tool integration.",
    "ArXiv Integration allowing paper search, metadata extraction, category filtering, and sorted results.",
    "PDF Processing including multi-page text extraction and web URL PDF reading.",
    "LaTeX Document Generation with mathematical notation, bibliography, and timestamped file output.",
    "Backend API exposing protected and public endpoints with secure file downloads and conversation control.",
    "Database and Storage management using Prisma, SQLite, and Supabase for persistent user data and cloud file storage.",
    "File Management system supporting dual storage (Supabase and local), secure authenticated downloads, and user-friendly UI components.",
    "Robust Performance Optimizations including conversation caching, smart truncation, and efficient SSE streaming."
  ],
  "user_flow_summary": [
    "Users sign up or sign in through Clerk authentication to access personalized research sessions.",
    "Users enter topics or queries in a streaming chat interface and receive AI-generated responses in real time.",
    "Users can create, view, switch between, or delete multiple research conversations with AI-generated titles.",
    "Users search for academic papers via integrated ArXiv API with filters and sorted listings.",
    "Users upload or automatically retrieve PDFs for reading and content extraction within the platform.",
    "Users generate new research papers using LaTeX templates, rendered to PDF with proper mathematical and bibliographic support.",
    "Users download generated PDFs via in-chat buttons or file listing UI, with progress and error handling.",
    "Backend manages data persistence, conversation memory, and AI agent orchestration with seamless stateful workflows."
  ],
  "validation_criteria": [
    "User authentication and session management operate securely and correctly across platforms.",
    "Real-time streaming chat responses show incremental tokens without delays or errors.",
    "AI-generated conversation titles are relevant and correctly assigned.",
    "Academic paper searches return accurate, filtered, and sorted results from ArXiv.",
    "PDF text extraction correctly handles multi-page documents and URL-based sources.",
    "Generated LaTeX PDFs render accurately with math notation and bibliography.",
    "All API endpoints respond with appropriate authentication, error handling, and correct data.",
    "Files upload and download processes function reliably with correct permissions and fallbacks.",
    "Conversation history and state persist across user sessions and server restarts.",
    "Performance benchmarks including streaming latency, database query times, and caching efficiency meet specified thresholds."
  ],
  "code_summary": {
    "tech_stack": [
      "Python",
      "Next.js",
      "React",
      "TypeScript",
      "TailwindCSS",
      "Supabase",
      "Prisma",
      "npm"
    ],
    "features": [
      {
        "name": "AI Researcher Agent Core",
        "description": "The main entry point and orchestration for the AI research agent.",
        "files": [
          "agent/ai-researcher/main.py",
          "agent/ai-researcher/frontend.py"
        ]
      },
      {
        "name": "ArXiv Tool Integration",
        "description": "Handles searching and interacting with the arXiv API for research papers.",
        "files": [
          "agent/ai-researcher/arxiv_tool.py"
        ]
      },
      {
        "name": "PDF Generation and Reading",
        "description": "Manages the creation and parsing of PDF documents.",
        "files": [
          "agent/ai-researcher/write_pdf.py",
          "agent/ai-researcher/read_pdf.py"
        ]
      },
      {
        "name": "Supabase Storage Integration",
        "description": "Handles file storage and retrieval using Supabase.",
        "files": [
          "agent/ai-researcher/supabase_storage.py",
          "setup-supabase-storage.sql"
        ]
      },
      {
        "name": "Chat Interface",
        "description": "Frontend component for user interaction via a chat interface.",
        "files": [
          "frontend/app/chat/page.tsx"
        ]
      },
      {
        "name": "Sidebar Navigation",
        "description": "Frontend component for application navigation.",
        "files": [
          "frontend/app/components/Sidebar.tsx"
        ]
      },
      {
        "name": "Checking Component",
        "description": "A frontend component with an unspecified 'checking' functionality, likely for displaying status or validation.",
        "files": [
          "frontend/app/components/checking.tsx"
        ]
      },
      {
        "name": "Main Application Page",
        "description": "The primary landing page for the frontend application.",
        "files": [
          "frontend/app/page.tsx"
        ]
      },
      {
        "name": "UI Button Component",
        "description": "Reusable UI component for buttons.",
        "files": [
          "frontend/components/ui/button.tsx"
        ]
      },
      {
        "name": "Database Schema and Migrations",
        "description": "Defines the database structure and manages schema changes using Prisma.",
        "files": [
          "prisma/schema.prisma",
          "prisma/migrations/"
        ]
      }
    ]
  }
}
